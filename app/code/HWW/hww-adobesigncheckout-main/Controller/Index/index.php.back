<?php

namespace Harriswebworks\AdobeSignCheckoout\Controller\Index;

use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Controller\Result\JsonFactory;

class Index extends \Magento\Framework\App\Action\Action
{

  protected $_pageFactory;
  protected $_customerSession;
  protected $_storeManager;
  protected $_scopeConfig;
  /**
   * @var JsonFactory
   */
  protected $_resultJsonFactory;
  public function __construct(
    \Magento\Framework\App\Action\Context $context,
    \Magento\Customer\Model\Session $customerSession,
    \Magento\Store\Model\StoreManagerInterface $storeManager,
    ScopeConfigInterface $scopeConfig,
    \Magento\Framework\View\Result\PageFactory $pageFactory,
    JsonFactory $resultJsonFactory
  ) {
    $this->_pageFactory = $pageFactory;
    $this->_storeManager = $storeManager;
    $this->_scopeConfig = $scopeConfig;
    $this->_customerSession = $customerSession;
    $this->_resultJsonFactory = $resultJsonFactory;
    return parent::__construct($context);
  }


  public function getConfigValue($path)
  {
    return $this->_scopeConfig->getValue($path, \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
  }
  public function getCustomerId()
  {
    return $this->_customerSession->getCustomer()->getId(); //Print current customer ID
  }

  public function getCustomerGroupId()
  {
    return $this->_customerSession->getCustomer()->getGroupId(); //Print current customer group ID
  }

  public function getCustomerName()
  {
    return $this->_customerSession->getCustomer()->getFirstname(); //Print current customer name
  }

  public function getCustomerEmail()
  {
    return $this->_customerSession->getCustomer()->getEmail(); //Print current customer name
  }
  public function IsCustomerLoggedIn()
  {
    return $this->_customerSession->getCustomer()->isLoggedIn(); //Print current loggedin
  }


  public function execute()
  {
      
    $result = $this->_resultJsonFactory->create();
    // $id = '000000005';

    $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
    $cart = $objectManager->get('\Magento\Checkout\Model\Cart');
    $termsandcondition = $this->getConfigValue('hww_adobesigncheckoout/adobesignconf/termsandconditions');
    // get array of all items what can be display directly
    $itemsVisible = $cart->getQuote()->getAllVisibleItems();
    $cart->getQuote()->getShippingAddress();
    $shippingaddress = $cart->getQuote()->getShippingAddress();
    // $shippingaddress = $orders->getShippingAddress()->getData();
    // $items = $orders->getAllItems();
    $product = '';
    foreach ($itemsVisible as $item) {
      $product .= '<tr>' . '<td>' . $item->getName() . '</td>' . '<td>' . $item->getSku() . '</td>' . '<td>' . $item->getQty() .  '<td>' . $item->getPrice() . '</td>' . '</td></tr>';
    }
    //print_r($items);
    //print_r($orders->getData());
    //print_r($shippingaddress);
    //echo $custLastName= $orders->getCustomerLastname();
    //$mpdf = new \Mpdf\Mpdf();
    //$code = new \Mpdf\QrCode\QrCode('LOREM IPSUM 2019');
    //$output = new \Mpdf\QrCode\Output\Html();
    //echo $output->output($code);
//    $generator = new \Picqer\Barcode\BarcodeGeneratorHTML();
//    $barcode = $generator->getBarcode('FMT-00219', $generator::TYPE_CODE_128);
    // print_r(get_class_methods('Magento\Sales\Model\Order'));
    // $code = '';
    //Here Html code
    $html = '
<html>
<head>
<style>
body {font-family: sans-serif;
	font-size: 9pt;

}
h5, p {	margin: 0pt;
}
table.items {
	font-size: 9pt;
	border-collapse: collapse;
	border:0;

}
td { vertical-align: top;border:0;
}
table thead td {
	text-align: left;
	border:0;
	border-top: 3px solid #000000;
	border-bottom: 3px solid #000000;
}
table tfoot td {
	text-align: left;
}
.barcode {

	margin: 0;
	vertical-align: top;
	color: #000000;
}
.barcodecell {

	vertical-align: middle;
	padding: 0;
}
</style>
</head>
<body>

<htmlpagefooter name="myfooter">


<div style="font-size: 16px; padding: 0 !important;">
{{Signature1_es_:signer1:signature}} <br/>
DATE: {{Date1_es_:signer1:date}}
<div style="padding: 5px 0 0 15px">' . $shippingaddress['firstname'] . " " . $shippingaddress['lastname'] . '</div>
<div style="padding-left: 15px">' . $shippingaddress['company'] . '</div>
<div style="padding-left: 15px">' . $shippingaddress['street'] . '</div>
<div style="padding-left: 15px">' . $shippingaddress['city'] . ", " . $shippingaddress['region'] . ", " . $shippingaddress['postcode'] . '</div>
</div>
</div>
</htmlpagefooter>
<sethtmlpagefooter name="myfooter" value="on" />

<table class="header" width="100%" cellpadding="0" border="0">
<tr>
<td><img src="https://d1jyu6lon8onrd.cloudfront.net/logo/stores/1/logo-new.jpg" ></td>
<td style="border-left:1px solid #000000; padding-left:15px; padding-top:20px">Fulfilled by The Boat Locker<br />
706 Howard Ave<br />
Bridgeport, CT 06605<br />
203 259 7808<br />
info@boatlocker.com
</td>
</tr>
</table>
<h2 style="border-top:3px solid #000000; border-bottom:1px solid #000000;padding:5px 0; ">
</h2>
<div style="padding-left:30px;padding-bottom:15px;">
' . $shippingaddress['firstname'] . " " . $shippingaddress['lastname'] . '<br />
' . $shippingaddress['company'] . '<br />
' . $shippingaddress['street'] . '<br />
' . $shippingaddress['city'] . ", " . $shippingaddress['region'] . ", " . $shippingaddress['postcode'] . '<br />
T: ' . $shippingaddress['telephone'] . '<br />
E: ' . $shippingaddress['email'] . '<br />
</div>
<table class="items" width="100%" cellpadding="8" border="1">
<thead>
<tr>
<td >Product Name</td>
<td>SKU</td>
<td>QTY</td>
<td>Price</td>
</tr>
</thead>
<tbody>
' . $product . '


</tbody>
</table>

<div style="margin-top:50px;">
' . $termsandcondition . '
</div>


</body>
</html>
';
    // var_dump($html);exit;
    $mpdf = new \Mpdf\Mpdf([
      'margin_left' => 15,
      'margin_right' => 15,
      'margin_top' => 0,
      'margin_bottom' => 25,
      'margin_header' => 0,
      'margin_footer' => 10,
      'showBarcodeNumbers' => FALSE
    ]);
    $mpdf->WriteHTML($html);
    $filepath = '/home/training/public_html/pub/media/adobesignagreement/' . $this->getCustomerId() . '.pdf';
    $mpdf->Output($filepath, 'F');
//     $mpdf->Output($filepath, 'I');
    // $filename = 'AllPdf/' . uniqid() . 'test.pdf';
    // $mpdf->Output($filename, 'F');

    $baseUri = json_decode($this->getBaseUri())->apiAccessPoint;
//    var_dump($baseUri);
    $transientDocumentId = json_decode($this->getTransientDocumentId($baseUri,$filepath))->transientDocumentId;
//    var_dump($transientDocumentId);
    $lastSentAgreementID = json_decode($this->createSendAgreement($transientDocumentId,$baseUri))->id;
    $agreementStatus = json_decode($this->getAgreementInfo($lastSentAgreementID,$baseUri))->status;
    sleep(2);
    $signingUrl = ((array)((((array)((array) json_decode($this->getSigningUri($lastSentAgreementID,$baseUri))->signingUrlSetInfos)[0])["signingUrls"])[0]))["esignUrl"];
//    var_dump($signingUrl);exit;
    $result->setData(['output' => $signingUrl]);
    return $result;
  }


  public function getBaseUri()
  {
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => 'https://api.na1.echosign.com/api/rest/v6/baseUris',
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => '',
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 0,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => 'GET',
      CURLOPT_HTTPHEADER => array(
        'Authorization: Bearer 3AAABLblqZhByeyKN73VAQYcQjrZoZAp-wPZoZq7h2F-ItpOKQ4KYi-qTP_nHTKhf-Q7hSHd3fX6Nkag3N0uW0IdGzcdonTq-'
      ),
    ));
    $response = curl_exec($curl);
    curl_close($curl);
    return  $response;
  }
  public function getTransientDocumentId($baseUri,$filepath)
  {
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => $baseUri . 'api/rest/v6/transientDocuments',
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => '',
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 0,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => 'POST',
      CURLOPT_POSTFIELDS => array('File-Name' => 'response.pdf', 'File' => new \CURLFILE($filepath)),
      CURLOPT_HTTPHEADER => array(
        'Content-Type' => 'multiform/form-data',
        // 'Content-Type: application/x-www-form-urlencoded',
        'x-api-user: email:adobesign1999@gmail.com',
        'Authorization: Bearer 3AAABLblqZhByeyKN73VAQYcQjrZoZAp-wPZoZq7h2F-ItpOKQ4KYi-qTP_nHTKhf-Q7hSHd3fX6Nkag3N0uW0IdGzcdonTq-'
      ),
    ));
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
  }
  public function createSendAgreement($transientDocumentId,$baseUri)
  {
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => $baseUri .'api/rest/v6/agreements',
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => '',
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 0,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => 'POST',
      CURLOPT_POSTFIELDS => '{
      "fileInfos": [
        {
          "transientDocumentId": "' . $transientDocumentId . '"
        }
       ],
      "name": "API Send Transient Test Agreement 287",
      "participantSetsInfo": [
        {
          "memberInfos": [
            {
              "email": "adobesign1999@gmail.com"
            }
          ],
          "order": 1,
          "role": "SIGNER"
        }
      ],
      "signatureType": "ESIGN",
      "externalId": {
        "id": "NA2Account_1655335679"
      },
      "state": "IN_PROCESS"
      }',
      CURLOPT_HTTPHEADER => array(
        'x-api-user: email:adobesign1999@gmail.com',
        'Content-Type: application/json',
        'Authorization: Bearer 3AAABLblqZhByeyKN73VAQYcQjrZoZAp-wPZoZq7h2F-ItpOKQ4KYi-qTP_nHTKhf-Q7hSHd3fX6Nkag3N0uW0IdGzcdonTq-'
      ),
    ));
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
  }
  public function getAgreementInfo($lastSentAgreementID,$baseUri)
  {
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => $baseUri .'api/rest/v6/agreements/' . $lastSentAgreementID,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => '',
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 0,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => 'GET',
      CURLOPT_HTTPHEADER => array(
        'x-api-user: email:adobesign1999@gmail.com',
        'Authorization: Bearer 3AAABLblqZhByeyKN73VAQYcQjrZoZAp-wPZoZq7h2F-ItpOKQ4KYi-qTP_nHTKhf-Q7hSHd3fX6Nkag3N0uW0IdGzcdonTq-'
      ),
    ));
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
  }
  public function getSigningUri($lastSentAgreementID,$baseUri)
  {
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => $baseUri .'/api/rest/v6/agreements/' . $lastSentAgreementID . '/signingUrls',
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => '',
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 0,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => 'GET',
      CURLOPT_HTTPHEADER => array(
        'x-api-user: email:adobesign1999@gmail.com',
        'Authorization: Bearer 3AAABLblqZhByeyKN73VAQYcQjrZoZAp-wPZoZq7h2F-ItpOKQ4KYi-qTP_nHTKhf-Q7hSHd3fX6Nkag3N0uW0IdGzcdonTq-'
      ),
    ));
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
  }
}
